<!DOCTYPE html [
        <!ELEMENT html (entry)*>
        <!ELEMENT entry (body)*>
        <!ATTLIST entry
                id CDATA #REQUIRED>
        <!ELEMENT body (#PCDATA)>
        ]>
<html>
    <entry id="clear_env">
    <body>
    <![CDATA[Command.
Clear the environment]]>
    </body>
    </entry>
    <entry id="environment">
    <body>
    <![CDATA[A properties file that contains values that are useful. These are accessed
using the construct ${key} and replaced before any processing takes place. This allows
for shorthand to be used for commands.

See also: set_env, get_env, print_env, read_env, save_env]]>
    </body>
    </entry>
    <entry id="set_env">
    <body>
    <![CDATA[Command.
Set a value in the environment.

See also: get_env, clear_env, print_env, read_env, save_env]]>
    </body>
    </entry>
    <entry id="get_env">
    <body>
    <![CDATA[Command.
Retrieve a specific value from the environment.

See also: get_env, clear_env, print_env, read_env, save_env]]>
    </body>
    </entry>
    <entry id="print_env">
    <body>
    <![CDATA[Command.
Print out the entire environment.

See also: get_env, clear_env, get_env, read_env, save_env]]>
    </body>
    </entry>
    <entry id="read_env">
    <body>
    <![CDATA[Command.
Read the stored environment from a file.

See also: get_env, clear_env, print_env, save_env, set_env]]>
    </body>
    </entry>
    <entry id="save_env">
    <body>
    <![CDATA[Command.
Save the current environment to a file. This may be read later and re-used.

See also: get_env, clear_env, print_env, read_env, set_env]]>
    </body>
    </entry>
    <entry id="echo">
    <body>
    <![CDATA[Command.
Simply print the argument to the console. This is very useful in types of scripting
for output.

See also: set_output_on]]>
    </body>
    </entry>
    <entry id="commands">
    <body>
    <![CDATA[Commands are directives for the CLI to perform tasks on store object
such as serialization. Help here is rather short for any given command and the reason
is that every command has its own help facility. Simply type

command --help

E.g.

get_env --help

to get a great deal of help. ]]>
    </body>
    </entry>
    <entry id="set_output_on">
    <body>
    <![CDATA[Command.
Toggle output on or off. This is used in scripts where you do not want the usually
chatty CLI to print what it is doing.]]>
    </body>
    </entry>
    <entry id="set_verbose_on">
    <body>
    <![CDATA[Command.
If this is on, then additional output may be printed as the CLI operates.]]>
    </body>
    </entry>
    <entry id="version">
    <body>
    <![CDATA[Command.
Print the current version number to the console.]]>
    </body>
    </entry>
</html>
<!--
clear_env  echo  get_env  next_value  print_env  print_help  read_env  reset  save_env  set_env  set_output_on  set_verbose_on  version

-->
 <!--
 entry templates, without and with examples. These are not indented since
 we need to control whitespace and our ever so helpful editor adds it when
 any is detected, leading to bad output.

<entry id="">
<body>
<![CDATA[]]>
</body>
</entry>

<entry id="">
<body>
<![CDATA[]]>
</body>
<example>
<![CDATA[]]>
</example>
</entry>
          -->