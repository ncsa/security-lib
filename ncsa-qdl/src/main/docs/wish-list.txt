This is scrapbook of things That I would like to consider for QDL that are not fully formed
but should be captured someplace.

9/27/2021

Classes vs. delegation.
The problem with classes is managing the inheritance hierarchy. Allowing multiple inheritance
is apt to be problematic at times. A better way is to only have interfaces and implementations.
Therefore the relationships are all Has-a vs. Is-a.
Typically, the implementations are embedded modules.

A stem is a set of variables. An interface is a set of function signatures. So

interface[uri][f(x); f(x,y); g(x);];

 Looks like another module...

Z := delegate[uri][
  module_import(A,B);
  module_import(P,Q);
    f(x)->B#f2(x);
  f(x,y)->B#f2(x)*Q#h(y-3);
    g(x)->Q#g(x^2-1)/Q#h(x^2+1);
];
Access elements with
  Z#f(2);
or maybe
  Z::f(2)

Might also have default resolution  mechanism in delegate, so if has a function f and g that are
unique (like in the workspace) then

Z := delegate[uri][
  module_import(A,B);
  module_import(P,Q);
  f(x,y)->B#f(x)*Q#h(y-3);
];

f and g are delegated to B automatically. Alternately, import order determines resolution order.
so if there is no defintion of f explicit, then first wins?

Does this implies some sort of typing? Do want to be able to pass these around? the question then
is if this is a convenience for the author or for code re-use. Passing it around implies
more re-usability.


4/8/2021
 ┌──┬──┐  ╔══╦══╗ ╒══╤══╕ ╓──╥──╖
 │  │  │  ║  ║  ║ │  │  │ ║  ║  ║
 ├──┼──┤  ╠══╬══╣ ╞══╪══╡ ╟──╫──╢
 │  │  │  ║  ║  ║ │  │  │ ║  ║  ║
 └──┴──┘  ╚══╩══╝ ╘══╧══╛ ╙──╨──╜
╔═══════╦══════════════╦══════════════════════════╦══════╦══════════════════════════════════════════════════════════════╗
║ NS    ║    name      ║          args            ║ conf ║  description                                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║ list  ║ append       ║ arg., scalar             ║      ║  append a scalar to a list                                   ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ insert_at    ║ src.,start, len,         ║      ║  insert at the point, moving elements                        ║
║       ║              ║ target.,target_index     ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ copy         ║   "     "                ║      ║  copy at the point, i.e., overwrite                          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ reverse      ║ list.                    ║      ║  reverse elements                                            ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ subset       ║ arg,index[,len]          ║      ║  subset of a list starting at index to end or with len       ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║ stem  ║ box          ║ arg0,arg1,...            ║      ║  returns stem {'arg0':arg0,...} remove from symbols          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ common_keys  ║ left., right.            ║      ║  common keys in stems                                        ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ dim          ║ arg.                     ║      ║  list of lengths of axes                                     ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ exclude_keys ║ arg., list.              ║      ║  exclude the keys in list.                                   ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ has_keys     ║ arg., list.              ║   R  ║  boolean list                                                ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ has_value    ║ left, right              ║   L  ║  Checks left arg values (keys ignored) in right arg.         ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ include_keys ║ arg., list.              ║  -   ║ returns only elements of arg. with keys in list.             ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ indices      ║ arg0,arg1,...            ║      ║  returns stem list with given shape                          ║
║       ║              ║  [,[values]]             ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ is_list      ║ arg.                     ║  -   ║ boolean if arg. is exactly a list                            ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ join         ║ left., right.[, axis]    ║  -   ║ catenate the elements of left. and right. along the axis.    ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ keys         ║ arg.[,filter]            ║      ║ returns stem {key0:key0,key1:key1,...}                       ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ list_keys    ║ arg.[,filter]            ║      ║ returns list [key0,key1,...]                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ mask         ║ left., right.            ║  L   ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ rank         ║ arg.                     ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ remove       ║ var_name                 ║      ║ deletes var_name from symbol table                           ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ rename_keys  ║ arg., stem.              ║  L   ║ renames the keys in arg. as per stem.                        ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ set_default  ║ arg., scalar             ║   -  ║ returns arg.~{*:scalar}                                      ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ shuffle      ║ int | arg.[,list.]       ║      ║ randomly shuffles elements of arg. or reorders them          ║
║       ║              ║                          ║      ║ as per list.                                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ size         ║   arg.                   ║      ║ number of elements                                           ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ to_list      ║  arg0,arg1,...           ║   -  ║ returns [arg0,arg1,...]                                      ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ trim         ║   arg.                   ║      ║ trims a stem of strings on 0th axis                          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ unbox        ║   arg.                   ║      ║ turns stem into a set of variables.                          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ union        ║  arg0.,arg1.,...         ║      ║ returns single stem of all keys. Overwrite possible          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ unique       ║  list.                   ║      ║ returns the unique elements in a list.                       ║
╚═══════╩══════════════╩══════════════════════════╩══════╩══════════════════════════════════════════════════════════════╝
 This is the master list of things to do with stems and lists (aside from to/from JSON).

 * Deprecation list
 append
 set_default
 to_list
 union
 Maybe vencode encode_b64, to_hex, to_json  replace with
 encode(type, arg)
 decode(type, arg)
 Support: hex, base 64, base 32 (new), json, variable
 Could get rid of 10 functions and make it more extensible.





