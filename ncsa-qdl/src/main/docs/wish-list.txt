This is scrapbook of things That I would like to consider for QDL that are not fully formed
but should be captured someplace.

4/20/2021

- signed axes 0,1,2, (like indices). axis of -1 is last axis which makes sense since dimension is a list

Two new operators
 - m_apply, d_apply

 m_apply(@monad, arg., axis) = apply the given monad to each element on the axis
 d_appy(left.[, left_axis], @dyad, @right.[,right_axis])

 E.g.
   d_apply(left., -1, @*, right.)

   multiplies the left. last axis with the right 0th axis == in matrixes, this part of matrix multiplication.
   Full matrix multiplication then is

    reduce(@+, some_axis, d_apply(left., -1, @*, right.))

    where some_axis is the new resulting axis inside the product. so if left. is 2x3x4 and right is 4x5x6
    the d_apply result has shape 2x3x4x5x6 (2nd axis, 4 elements, has been applied) so reduction is on the
    2nd axis.

    ===>>> Implies strongly some form of axis math needs to happen, or tracking so when an operator is
           applied to an axis, we know what the new, "hot" axis is (?)
                                             *
           Axis math: 2x3x4 OP 4x5x6 --> 2x3x4x5x6  hot axis has the * over it.

    It is pretty regular so that 2x3x4, -1 OPERATOR 4x5x6,0 certainly has enbough information to figure this out.
    Just question is how to transmit it faithfully?
    Alternate way of doing this is to have some notation for an axis and be able to query it? <a,b,c> is
    an axis list? Maybe write axis[2,3,4] instead i.e.,  add an axis directive?
    This introduces a new data type into QDL which is a very big step. Could also have some
    form of function to do it? axis(arg.). Or a connector 2!3!4 vs. 2! ?

    Compare APL expression for the inner product. Chop up A on its last axis, apply g to that along B's
    first axis, reduce with f (along it's zero-th action, A and B are matrices).
    A f.g B   ←→   f/¨ (⊂[¯1+⍴⍴A]A) ∘.g ⊂[0]B

-- Perhaps an axis or slice operator? slice(arg., axis) returns the list on axis.

(This is an example of an operator that simply swaps a pair of dimensions, could even have
 a generic version where by all the dimensions can be swapped,
 so
    δ(arg.) == [3,5,4]
    α(arg., [2,0,1])
 returns a 4x3x5 array.
    α(arg., scalar)
 returns a scalar x i x j x ... (puts the scalar axis first).
 )
    
  arg. := n(3,4,n(12))
[
  [0,1,2,3],
  [4,5,6,7],
  [8,9,10,11]
 ]

   slice(arg., 0) returns the list above. slice(arg.,1) returns the 4 list
[
    [0,4,8],
    [1,5,9],
    [2,6,10],
    [3,7,11]
]
 == [
     [arg.0.0, arg.1.0, arg.2.0],
     [arg.0.1,.arg.1.1, arg.2.1],
     [arg.0.2,.arg.1.2, arg.2.2],
     [arg.0.3,.arg.1.3, arg.2.3]
     ]
so slice(arg., 1) == takes a 3x4 stem and returns a 4x3 stem. slice(n(3,4,5),2) returns 5x4x3
E.g. arg2. := n(3,4,5,n(60))
            [
              [
                [0,1,2,3,4],
                [5,6,7,8,9],
                [10,11,12,13,14],
                [15,16,17,18,19]
              ],
              [
                [20,21,22,23,24],
                [25,26,27,28,29],
                [30,31,32,33,34],
                [35,36,37,38,39]
              ],
              [
                [40,41,42,43,44],
                [45,46,47,48,49],
                [50,51,52,53,54],
                [55,56,57,58,59]
              ]
             ]

slice(arg2., 0) -> 3x4x5 == arg2. == [arg2.0, arg2.1, arg2.2]
slice(arg., 1) -> 4x3x5  == [[arg2.0.0, arg2.1.0, arg2.2.0], [arg2.0.1, arg2.1.1, arg2.2.1],...
           [
             [
                [0,1,2,3,4],
                [20,21,22,23,24],
                [40,41,42,43,44],
             ]
             [
                [5,6,7,8,9],
                [25,26,27,28,29],
                [45,46,47,48,49],
             ]
             [
                [10,11,12,13,14],
                [30,31,32,33,34],
                [50,51,52,53,54],
             ]
             [
                [15,16,17,18,19]
                [35,36,37,38,39]
                [55,56,57,58,59]
             ]
           ]

                          n(3,4,[arg.0.0.0, arg.0.1.0, arg.0.2.0, arg.0.3.0,
                                 arg.1.0.0, arg.1.1.0, arg.1.2.0,arg.1.3.0,
                                 arg.2.0.0,arg.2.1.0,arg.2.2.0, arg.2.3.0],

slice(arg2., 2) -> 5x3x4
          [
                [
                  [0,5,10,15],
                  [20,25,30,35],
                  [40,45,50,55]
                ]
                   [1,6,11,16],
                   [21,26,31,36],
                   [41,46,51,56]
               ]
               etc.
           ]


         while[
           for_next(i,3)][
           while[
              for_next(j,4)][
              say(arg2.i.j);
           ]; //inner
         ]; //outer

       // elements for arg2. on last axis, n is index of entry
      define[slice(n) ][  while[for_next(i,3)][while[for_next(j,4)][say(arg2.i.j.n);];];]
      // print out the indices
      define[islice(n) ][  while[for_next(i,3)][while[for_next(j,4)][say(i+'.'+j+'.'+n);];];]

 // doodle to do in qdl:
slice(arg., 1) -> 4x3x5  == [[arg2.0.0, arg2.1.0, arg2.2.0], [arg2.0.1, arg2.1.1, arg2.2.1],...

            define[slice0(arg.)][return(arg.);]
            define[slice1(arg.)][
              out0.:={};
              while[
                for_keys(i,arg.)
               ][
                 out1.:={};
                 while[
                  for_next(j,arg.i)
                 ][
                   out1.j := arg.i.];
                 ];// end inner while
                 out0.i := out1.j;
              ]; //end outer while
            ]; //end definition

4/8/2021
 ┌──┬──┐  ╔══╦══╗ ╒══╤══╕ ╓──╥──╖
 │  │  │  ║  ║  ║ │  │  │ ║  ║  ║
 ├──┼──┤  ╠══╬══╣ ╞══╪══╡ ╟──╫──╢
 │  │  │  ║  ║  ║ │  │  │ ║  ║  ║
 └──┴──┘  ╚══╩══╝ ╘══╧══╛ ╙──╨──╜
╔═══════╦══════════════╦══════════════════════════╦══════╦══════════════════════════════════════════════════════════════╗
║ NS    ║    name      ║          args            ║ conf ║  description                                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║ list  ║ append       ║ arg., scalar             ║      ║  append a scalar to a list                                   ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ insert_at    ║ src.,start, len,         ║      ║  insert at the point, moving elements                        ║
║       ║              ║ target.,target_index     ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ copy         ║   "     "                ║      ║  copy at the point, i.e., overwrite                          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ reverse      ║ list.                    ║      ║  reverse elements                                            ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ subset       ║ arg,index[,len]          ║      ║  subset of a list starting at index to end or with len       ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║ stem  ║ box          ║ arg0,arg1,...            ║      ║  returns stem {'arg0':arg0,...} remove from symbols          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ common_keys  ║ left., right.            ║      ║  common keys in stems                                        ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ dim          ║ arg.                     ║      ║  list of lengths of axes                                     ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ exclude_keys ║ arg., list.              ║      ║  exclude the keys in list.                                   ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ has_keys     ║ arg., list.              ║   R  ║  boolean list                                                ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ has_value    ║ left, right              ║   L  ║  Checks left arg values (keys ignored) in right arg.         ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ include_keys ║ arg., list.              ║  -   ║ returns only elements of arg. with keys in list.             ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ indices      ║ arg0,arg1,...            ║      ║  returns stem list with given shape                          ║
║       ║              ║  [,[values]]             ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ is_list      ║ arg.                     ║  -   ║ boolean if arg. is exactly a list                            ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ join         ║ left., right.[, axis]    ║  -   ║ catenate the elements of left. and right. along the axis.    ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ keys         ║ arg.[,filter]            ║      ║ returns stem {key0:key0,key1:key1,...}                       ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ list_keys    ║ arg.[,filter]            ║      ║ returns list [key0,key1,...]                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ mask         ║ left., right.            ║  L   ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ rank         ║ arg.                     ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ remove       ║ var_name                 ║      ║ deletes var_name from symbol table                           ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ rename_keys  ║ arg., stem.              ║  L   ║ renames the keys in arg. as per stem.                        ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ set_default  ║ arg., scalar             ║   -  ║ returns arg.~{*:scalar}                                      ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ shuffle      ║ int | arg.[,list.]       ║      ║ randomly shuffles elements of arg. or reorders them          ║
║       ║              ║                          ║      ║ as per list.                                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ size         ║   arg.                   ║      ║ number of elements                                           ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ to_list      ║  arg0,arg1,...           ║   -  ║ returns [arg0,arg1,...]                                      ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ trim         ║   arg.                   ║      ║ trims a stem of strings on 0th axis                          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ unbox        ║   arg.                   ║      ║ turns stem into a set of variables.                          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ union        ║  arg0.,arg1.,...         ║      ║ returns single stem of all keys. Overwrite possible          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ unique       ║  list.                   ║      ║ returns the unique elements in a list.                       ║
╚═══════╩══════════════╩══════════════════════════╩══════╩══════════════════════════════════════════════════════════════╝
 This is the master list of things to do with stems and lists (aside from to/from JSON).

 * Deprecation list
 append
 set_default
 to_list
 union
 Maybe vencode encode_b64, to_hex, to_json  replace with
 encode(type, arg)
 decode(type, arg)
 Support: hex, base 64, base 32 (new), json, variable
 Could get rid of 10 functions and make it more extensible.


3/9/2021
The current parser definitions require that expression stems components be either simple variables,
functions or ( expression). So
f(n).3 fails
f(n).(3) works
This is because parsing would tokenize
a.0
as the simple variable "a" followed by the decimal ".0" and then blow up. The parser tries to match
in this way automatically. The way to fix this is with
predicates in the grammar that plays with the input stream and tokens found up to this point. This
is an entire chapter in the Antlr book, so it needs some serious study.

For now, it all works, so the day to parser get rewritten with predicates just means parentheses
can get dropped.

10/5/2020
- Workspace Library mangement
    Be able to designate a command to run on load/reload
    Have a run_on_load property in WS that is the name of a command?
    Or have a designated method like on_boot() or init() that is always run? Gives another keyword
    basically in QDL. :(



