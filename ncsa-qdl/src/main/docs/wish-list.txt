This is scrapbook of things That I would like to consider for QDL that are not fully formed
but should be captured someplace.

4/8/2021
 ┌──┬──┐  ╔══╦══╗ ╒══╤══╕ ╓──╥──╖
 │  │  │  ║  ║  ║ │  │  │ ║  ║  ║
 ├──┼──┤  ╠══╬══╣ ╞══╪══╡ ╟──╫──╢
 │  │  │  ║  ║  ║ │  │  │ ║  ║  ║
 └──┴──┘  ╚══╩══╝ ╘══╧══╛ ╙──╨──╜
╔═══════╦══════════════╦══════════════════════════╦══════╦══════════════════════════════════════════════════════════════╗
║ NS    ║    name      ║          args            ║ conf ║  description                                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║ list  ║ append       ║ arg., scalar             ║      ║  append a scalar to a list                                   ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ insert_at    ║ src.,start, len,         ║      ║  insert at the point, moving elements                        ║
║       ║              ║ target.,target_index     ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ copy         ║   "     "                ║      ║  copy at the point, i.e., overwrite                          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ reverse      ║ list.                    ║      ║  reverse elements                                            ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ subset       ║ arg,index[,len]          ║      ║  subset of a list starting at index to end or with len       ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║ stem  ║ box          ║ arg0,arg1,...            ║      ║  returns stem {'arg0':arg0,...} remove from symbols          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ common_keys  ║ left., right.            ║      ║  common keys in stems                                        ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ dim          ║ arg.                     ║      ║  list of lengths of axes                                     ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ exclude_keys ║ arg., list.              ║      ║  exclude the keys in list.                                   ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ has_keys     ║ arg., list.              ║   R  ║  boolean list                                                ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ has_value    ║ left, right              ║   L  ║  Checks left arg values (keys ignored) in right arg.         ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ include_keys ║ arg., list.              ║  -   ║ returns only elements of arg. with keys in list.             ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ indices      ║ arg0,arg1,...            ║      ║  returns stem list with given shape                          ║
║       ║              ║  [,[values]]             ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ is_list      ║ arg.                     ║  -   ║ boolean if arg. is exactly a list                            ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ join         ║ left., right.[, axis]    ║  -   ║ catenate the elements of left. and right. along the axis.    ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ keys         ║ arg.                     ║      ║ returns stem {key0:key0,key1:key1,...}                       ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ list_keys    ║ arg.                     ║      ║ returns list [key0,key1,...]                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ mask         ║ left., right.            ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ rank         ║ arg.                     ║      ║                                                              ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ remove       ║ var_name                 ║      ║ deletes var_name from symbol table                           ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║   "   ║ rename_keys  ║ arg., stem.              ║      ║ renames the keys in arg. as per stem.                        ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ set_default  ║ arg., scalar             ║   -  ║ returns arg.~{*:scalar}                                      ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ shuffle      ║ arg.[,list.]             ║      ║ randomly shuffles elements of arg. or reorders them          ║
║       ║              ║                          ║      ║ as per list.                                                 ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ size         ║   arg.                   ║      ║ number of elements                                           ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ to_list      ║  arg0,arg1,...           ║   -  ║ returns [arg0,arg1,...]                                      ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ unbox        ║   arg.                   ║      ║ turns stem into a set of variables.                          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ union        ║  arg0.,arg1.,...         ║      ║ returns single stem of all keys. Overwrite possible          ║
╠═══════╬══════════════╬══════════════════════════╬══════╬══════════════════════════════════════════════════════════════╣
║  "    ║ unique       ║  list.                   ║      ║ returns the unique elements in a list.                       ║
╚═══════╩══════════════╩══════════════════════════╩══════╩══════════════════════════════════════════════════════════════╝
 This is the master list of things to do with stems and lists (aside from to/from JSON).

3/9/2021
The current parser definitions require that expression stems components be either simple variables,
functions or ( expression). So
f(n).3 fails
f(n).(3) works
This is because parsing would tokenize
a.0
as the simple variable "a" followed by the decimal ".0" and then blow up. The parser tries to match
in this way automatically. The way to fix this is with
predicates in the grammar that plays with the input stream and tokens found up to this point. This
is an entire chapter in the Antlr book, so it needs some serious study.

For now, it all works, so the day to parser get rewritten with predicates just means parentheses
can get dropped.

10/5/2020
- Workspace Library mangement
    Be able to designate a command to run on load/reload
    Have a run_on_load property in WS that is the name of a command?
    Or have a designated method like on_boot() or init() that is always run? Gives another keyword
    basically in QDL. :(



