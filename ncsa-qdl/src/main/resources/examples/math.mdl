/*
   Example of how to write some math functions in QDL, putting them in a module.
*/

module[
  'qdl:/math','mm'
  ]body[
   define[sqrt(x)]body[
   >> A function to compute the sqrt of a positive number x
   >> Usage sqrt(x);
   >> where 0 < x is a number.
   >> The default is 10 iterations, which should give pretty good precision for most purposes.
   >> This uses the Newton-Raphson method.
   if[x < 0][return(0);];
      x0 := 1;
      m := 10;
      while[
          for_next(j,m)
        ]do[
          x0 := (x0 + x/x0)/2;
         ]; // end loop
      return(x0);
   ]; //end sqrt(1)

   define[sqrt(x,m)]body[
    >> A function to compute the sqrt of a positive number x and use m iterations
    >> Usage sqrt(x,m);
    >> where 0 < x is a number.
    >> This uses the Newton-Raphson method.
       x0 := 1;
       while[
           for_next(j,m)
         ]do[
           x0 := (x0 + x/x0)/2;
          ]; // end loop
       return(x0);
    ]; //end sqrt(2)

    define[nroot(x,n)]body[
       >> A function to compute the n-th root of a positive number x, so nroot(x,n)^n == x
       >> Usage nroot(x,n);
       >> where 0 < x is an integer, 1 < n.
       >> This uses the Newton-Raphson method.
        x0 := 1;
        while[
            for_next(j,10)
          ]do[
            x0 := ((n-1)*x0 + x/x0^(n-1))/n;
           ]; // end loop
        return(x0);
     ]; //end nroot(2)

     define[nroot(x,n,m)]body[
       >> A function to compute the n-th root of a positive number x, using m iterations.
       >> so nroot(x,n,m)^n == x
       >> Usage nroot(x,n, m);
       >> where 0 < x is an integer, 1 < n, 0 < m is an integer.
       >> This uses the Newton-Raphson method.
          x0 := x/2;
          while[
              for_next(j,m)
            ]do[
              x0 := ((n-1)*x0 + x/x0^(n-1))/n;
             ]; // end loop
          return(x0);
     ]; //end nroot(3)
]; //end module