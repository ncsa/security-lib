module[
   'qdl:/math/x','mathx'
]body[
   >> This module defines several additional functions for mathematics
   >> These include sec(), sech() etc.
        sec(x)->1/cos(x);
        csc(x)->1/sin(x);
        cot(x)->1/tan(x);
       asec(x)->acos(1/x);
       acsc(x)->asin(1/x);
       acot(x)->atan(1/x);
       sech(x)->1/cosh(x);
       csch(x)->1/sinh(x);
       coth(x)->1/tanh(x);
      asech(x)->acosh(1/x);
      acsch(x)->asinh(1/x);
      acoth(x)->atanh(1/x);

  // Here starts definitions using the full syntax, so we can include some
  // online help.
   define[hypotenuse(a,b)][
     >> The hypotenuse of a right triangle, given the other two sides.
     >> sqrt(a^2 + b^2);
     return(sqrt(a^2 + b^2));
   ];

   define[sqrt(x)][
     >> The (non-negative) square root of the argument
     return(nroot(x, 2));
   ];

   define[nn(k)][
     >> convenience function for k integers, starting at 1
     >> This is in contract the the standard indices function
     >> n(k) that starts at zero.
     return(1+n(k));
   ];

   define[logn(x,n)][
     >> The logarithm, base n for x.
     >> Note that both may be stems.
     return(ln(x)/ln(n));
   ];

   define[ fork(@monad1(),@dyad(),@monad2(),x.)][
     >> A fork is defined as a taking a dyad and two monads and applying them to an argument
     >>    dyad(monad1(x.), monad2(x.)
     >> A surprisingly large number of problems are addressed by this: transform the argument
     >> then use both results for something else. For instance
     >> to compute the average of a set of numbers, define
     >>    sum(x.)->reduce(@+, x.);
     >> then the average of the first 10 odd numbers is
     >>    fork(@sum(), @/, @size(), 1+2*n(10));
     >> So "sum divided by size" is how to read this.
     >> Note the dyad (any algebraic operation like addition is a dyad) is put
     >> in the middle of the argument list so it looks any other operator.
     return(dyad(monad1(x.),monad2(x.)));
   ];

   define[polynomial(coefficients., x)][
     >> polynomial(coefficients., arg) takes a list of coefficients (0th index) is constant and evaluates it.
     >> so polynomial([3,5,7,11], x) == 11*x^3 + 7*x^2 + 5*x + 3
     return(reduce(@+, coefficients.*(x^n(size(coefficients.)))));
   ];

   define[poly2(coefficients., x)][
     >> poly2(coefficients., arg) takes a list of coefficients (last index is the constant) and evaluates it.
     >> so poly2([11,7,5,3], x) == 11*x^3 + 7*x^2 + 5*x + 3
     >> This is because some people just find it optically easier.
     return(reduce(@+, list_reverse(coefficients.)*(x^n(size(coefficients.)))));
   ];

   define[
     interval(x.)
     ][
     >> creates a stem from [start, stop, count] that are count elements evenly distributed.
     >> This is used in the plotting programs
     >> E.g.
     >> interval([-2,3,10])
     >> [-2,-1.445,-0.889,-0.3333,0.222,0.777,1.333,1.888,2.444,3]
     >> (with numeric digits set to 3 so it's a tidy example.)
        return(n(x.2)/(x.2-1)*(x.1 - x.0) + x.0);
     ]; //end interval

      define[
         plot(@f(), arg.)
      ][
        >> A program to generate the plot points a real valued function over an interval
        >> [start, stop, n].
        >> The result is a list of (x,y) coordinates.
        >> Try it out on
        >> plot(@sin(), [0, pi()/2, 10])

         x. := interval(arg.);
         y. := f(x.);
         return(x.~|y.);
      ];

      define[
         pplot(@x(), @y(), arg.)
      ][
        >> A program to generate the parametric plot points of two real valued function over an interval
        >> [start, stop, n]
        >> The result is a list of (x,y) coordinates.
        >> Try it out on
        >> pplot(@sin(),@cos(),  [0, pi()/2, 10])
        if[arg.2 < 2][say('sorry, you need at least 2 points');return();];
         t. := interval(arg.);
         x. := x(t.);
         y. := y(t.);
         return(x.~|y.);
      ];
       define[
          splot(@x(), @y(), @z(), t_arg., s_arg.)
       ][
         >> A program to generate the parametric surface plot points of three real valued functions
         >> over the intervals [start0, stop0,  n0] and [start1, stop1,  n1].
         >> The result is a list of (x,y,z) coordinates.
         >> E.g.
         >> x(t,s)->sin(t)*cosh(s)
         >> y(t,s)->cos(t)*sinh(s)
         >> z(t,s)->sin(2*t)*cos(3*s)
         >> t. :=[-1,1,10]
         >> s. :=[0,1,10]
         >> splot(@x(), @y(), @z(), t., s.)

          if[t_arg.2 < 2 || s_arg.2 < 2][say('sorry, you need at least 2 points');return();];
          t. := interval(t_arg.);
          s. := interval(s_arg.);
          x. := x(t., s.);
          y. := y(t., s.);
          z. := z(t., s.);
          // In the next bit, x.~|y. creates the two columns, then we just need
          // to add z. to it.
          return(join(x.~|y., z., 1));
       ];
       /*
         x(t,s)->sin(t)*cosh(s)
         y(t,s)->cos(t)*sinh(s)
         z(t,s)->sin(2*t)*cos(3*s)
         t. :=[-1,1,10]
         s. :=[0,1,10]
         splot(@x(), @y(), @z(), t., s.)
       */

      define[
         for_each(@f(),a.)
      ][
         >> Apply a function to each element of a list. Some functions,
         >> such as to_string, operate on lists rather than element-wise
         >> This will apply the function to each enry of a stem.
         >> For instance, if you are doing an export of a stem to some file format
         >> like CVS, you would need to turn each line into a string to process it
         >> with a command like
         >> for_each(@to_string(), my_stem.)
         z. := null;
         while[for_keys(k,a.)][z.k := f(a.k);];
         return(z.);
     ];  // end for_each

     define[
        to_csv(a.)
     ][
        >> convert a stem., a., to csv (comma separated values) format.
        >> a. stem to be converted. Each element is a list and will be a line
        >> in the output.
        >> typical use is
        >> file_write(my_file, to_cvs(data.));
        >> E.g. here is the start of one
        >> a.0 := ['t', 'x', 'y']; // header
        >> a.1 := [0, .5, .345723445]; // first line of data
        >> tip:  [['t', 'x','y']]~a. would stick in the headers.
        z. := for_each(@to_string(), a.) - ']' - '[';
        return(z.);
     ]; //end to_cvs
     /*
        To use this with gnuplot, go to a work directory (here I am using /tmp
        but you should create your own),  and create
        the file cfg.gnuplot containing the lines

        set datafile separator ','
        plot '/tmp/data.csv' using 1:2 with lines, '' using 1:3 with lines

        Then to export QDL, try this in QDL

        file := '/tmp/data.csv';
        y. := pplot(@cos(),@sin(),-pi(),pi(),500);
        file_write(file, to_csv([['x','y']]~y.));

        At the command line, you can see the plot by running gnuplot like this:

        gnuplot -p cfg.gnuplot

        you should see a circle of radius 1.

     */
     // file_write('/tmp/data.csv',  to_csv([['x','y']]~y.))
]; // end module
