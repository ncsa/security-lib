module[
   'qdl:/extensions','ext'
]body[
   >> This module defines several additional functions for mathematics
   >> These include sec(), sech() etc.
   >>    clone(arg.) - make a complete copy of a stem
   >>    for_each(@monad, arg.) -- apply the monad to each individual element of arg.
   >>    fork(@monad0, @dyad, @monad1, arg) - evaluate dyad(monad0(arg),monad1(arg))
   >>    n_copy(s,n) - make a stem with n copies of the argument s
   >>    to_csv(arg.)- export a stem to comma separated format.
   >>    
   >> Mostly this is for very useful functions (like ravel) that are way easier
   >> to write in QDL than anything else.

    define[clone(arg)][
        >> clone(arg.) - Returns a completely new copy of the stem.
        >> Since generally stems are by reference, not value,  something like
        >> a. := b.
        >> a.0 := 42
        >> sets element 42 in b. as well. To have them independent, use this
        >> If arg is not a stem, it is simply returned since all other references
        >> are by value.
        if[var_type(arg) != constants('var_type').stem][return(arg);];
        return(from_json(to_json(arg)));
   ];

   define[n_copy(s, n)][
     >> n_copy(s,n) - Create a stem with 0 < n copies of the single argument s.
     out. := null;
     if[n <= 0][return([]);];
     while[for_next(j, [;n])][out.j := s;];
     return(out.);
   ];


   define[ fork(⊗monad1,⊗dyad,⊗monad2,x.)][
     >> fork(⊗monad1,⊗dyad,⊗monad2,x.) - apply a fork to a stem.
     >> A fork is defined as a taking a dyad and two monads and applying them to an argument
     >>    dyad(monad1(x.), monad2(x.)
     >> A surprisingly large number of problems are addressed by this: transform the argument
     >> then use both results for something else. For instance
     >> to compute the average of a set of numbers, define
     >>    sum(x.)->reduce(@+, x.);
     >> then the average of the first 10 odd numbers is
     >>    fork(@sum(), @/, @size(), 1+2*n(10));
     >> So "sum divided by size" is how to read this.
     >> Note the dyad (any algebraic operation like addition is a dyad) is put
     >> in the middle of the argument list so it looks any other operator.
     return(dyad(monad1(x.),monad2(x.)));
   ];

   define[
      to_csv(a.)
    ][
      >> to_csv(arg.) - Convert a stem., a., to csv (comma separated values) format.
      >> arg. is the stem to be converted. Each element is a list and will be a line
      >> in the output. A typical use is
      >>     file_write(my_file, to_csv(data.));
      >> E.g. here is the start of one
      >>     a.0 := ['t', 'x', 'y']; // header
      >>     a.1 := [0, .5, .345723445]; // first line of data
      >> tip:  [['t', 'x','y']]~a. would stick in the headers.
      // convert each entry and remove the [] so its just numbers
      z. := for_each(@to_string(), a.) - ']' - '[';
      return(z.);
   ]; //end to_cvs

   define[
       ravel(q)
   ][
      >> ravel(q) - turn any stem (of any dimension) into a list of values.
      >> This always returns a simple list. If you supply a scalar, that will be
      >> returned in a list too.
      >> One use is 'pouring' one set of values into another shape
      >> E.g.
      >>     q. := n(2,6,[;12]);
      >>     n(3,2,2, ravel(q.))
      >> [
      >>    [[0,1],[2,3]],
      >>    [[4,5],[6,7]],
      >>    [[8,9],[10,11]]
      >>  ]
      >>
      >> E.g.
      >>     ravel(n(2,3,2,3,[;2*3*2*3]))
      >>    [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
      >>        21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]
      if[var_type(q) != constants().var_type.stem][return([q]);];
      return(remap(q, indices(q)));
   ]; // end ravel

  define[
      laminate(x, y)
   ][
     >> Laminate along zero-th axis. See help for laminate(x,y,axis).
      return(laminate(x,y,0));
   ];
    //  laminate(n(2,3,[;6]),n(2,3,[10;16]),0)
  /*
      laminate should be a base function, but is an example of something QDL
      should do that is darned near impossible to write in Java.
  */
  define[
      laminate(x, y, axis)
   ][
     >> laminate(x, y, axis) - paste two stems together along an axis
     >> At least one of x and y is a stem.
      types ≔ (var_type(x) ≡ 4?1:0) + (var_type(y) ≡ 4?2:0);
      // 0 - both scalars, 1 - x only stem, 2 - y only stem 3 - both stems
      if[types ≡ 0][return([x,y]);]; // trivial case
      left. ≔ ∅; right. ≔ ∅;
      l_dim. ≔ ∅; r_dim.≔ ∅;
      switch[
          if[types ≡ 1][left.≔x; l_dim.≔ dim(x);r_dim.≔clone(l_dim.);right.≔n(r_dim., [y]);];
          if[types ≡ 2][right.≔y;r_dim.≔dim(y);l_dim.≔clone(r_dim.);left.≔n(l_dim., [x]);];
          if[types ≡ 3][left.≔x;right.≔y;l_dim.≔dim(x);r_dim.≔dim(y);];
      ]; // end switch
      // one may be one rank high if they are conformable
      l_rank ≔ size(l_dim.); r_rank ≔ size(r_dim.);
      ⊨ abs(l_rank - r_rank) ≤ 1; 'rank error';
      ⊨ (0 ≤ axis) ∧ (axis ≤ min(l_rank, r_rank));
      // Next function augments the rank of the argument(s)
      aug(δ., α)->(size(δ.) ≡ α)?δ.~1:insert_at([1],0,1,δ., α);
      if[r_rank ≡ l_rank][l_dim. ≔ aug(l_dim., axis);r_dim. ≔ aug(r_dim., axis);];
      if[l_rank < r_rank][l_dim. ≔ aug(l_dim., axis);];
      if[r_rank < l_rank][r_dim. ≔ aug(r_dim., axis);];
      // Final conformability check
      v. ≔ l_dim. ≡ r_dim.;
      v.axis ≔ true;
      ⊨ reduce(⊗∧, v.) : 'ranks not conformable';
      return(join(n(l_dim., ravel(left.)), n(r_dim., ravel(right.)), axis));
   ]; // end laminate


   define[
      inner_product(⊗f, x., ⊗g, y.)
   ][
     >> inner_product(⊗f, x., ⊗g, y.) - compute the inner product of x. and y.
     >> using the given functions. f and g are dyadic. This applies g along
     >> the first axis of x. and the last axis of y.,
     >> then reduces along the last axis. It is a common idiom.
     >> The result is conformable to x.
     >> In the simple case of two matrices and f is addtion, g is multiplication
     >> this is exactly the matrix product.
     >>
     >> E.g.
     >> Given a long list of elements probably in random order, find which are included.
     >>      ϱ. := unique(['a','b',0,3,true]~'c'~[['a','b',-2,'q',true]]~[[['aa','b',4,17,2/3]]])
     >>      inner_product(⊗∨, ['a','b','s','c',0,3,true], @≡,  ϱ.)
     >> [true,true,false,true,true,true,true]
          return(reduce(⊗f, τ(for_each(⊗g, x., τ(y.,-1)) ,-1)));
   ];

    define[
       reduce_all(⊗f, arg.)
    ][
    >> reduce_all(⊗f, arg.) - apply reduce to the arguments until a scalar result.
    >> This lets you check across large stems.
    >>
    >>     a. := n(3,4,5,6,[;3*4*5*6])
    >>     reduce_all(⊗∧, a. < 1000)
    >> true
    >>
    >> So every elements of a. is elss than 1000.
       rank := rank(arg.);
       foo. := arg.;
       while[1 < rank--][
          foo. := reduce(⊗f, foo.);
       ];
       return(reduce(⊗f, foo.));
    ];
    define[
      mload(path)
    ][
      >> Convenience to import a module and load an instance of it all at
      >> once. This returns the name of the imported module.
       return(module_import(module_load(path)));
    ];


    /*
     a. := n(3,4,5,6,[;3*4*5*6])
     reduce_all(@&&, a. < 1000)
     */
   // The next is an example of using the inner product. It is identical in function to
   // the built in has_value function.
/*   define[
      ε(x., y.)
   ][
   >> ε(x., y.) - the is member of function for two lists. This will return a boolean list
   >> conformable to x. with true for elements that are in y. and false otherwise.
   return(inner_product(@||, x., @==, y.));
   ];*/
/*
   ε(x., y.) -> inner_product(@||, x., @==, y.)
       ε(['a','b','s','c',0,3,true],ϱ. )
  ϱ. := unique(['a','b',0,3,true]~'c'~[['a','b',-2,'q',true]]~[[['aa','b',4,17,2/3]]])
     z. := ['a','b','s','c',0,3,true]
 */
     /*
        To use this with gnuplot, go to a work directory (here I am using /tmp
        but you should create your own),  and create
        the file cfg.gnuplot containing the lines

        set datafile separator ','
        plot '/tmp/data.csv' using 1:2 with lines, '' using 1:3 with lines

        Then to export QDL, try this in QDL

        file := '/tmp/data.csv';
        y. := pplot(@cos(),@sin(),-pi(),pi(),500);
        file_write(file, to_csv([['x','y']]~y.));

        At the command line, you can see the plot by running gnuplot like this:

        gnuplot -p cfg.gnuplot

        you should see a circle of radius 1.

     */
     // file_write('/tmp/data.csv',  to_csv([['x','y']]~y.))
]; // end module
