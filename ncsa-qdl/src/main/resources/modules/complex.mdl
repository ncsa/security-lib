/*
  Module for complex numbers.
*/

module[
   'qdl:/math/complex','complex'
]body[
    >> Complex number operations on simple numbers as lists.
    >> These do not work iteratively since the plan is to introduce
    >> actual complex number support at some point into QDL. These are
    >> examples and also allow for some quick calculations
    c_plus(a.,b.)→a.+b.;
    c_minus(a.,b.)→a.-b.;
    c_times(a.,b.)→to_list(a.0×b.0 - a.1×b.1, a.0×b.1+b.0×a.1);
    c_mod2(z.)→reduce(@+,z.^2);
    c_mod(z.)→sqrt(c_mod2(z.));
    c_conj(z.)→[z.0,-z.1];
    c_div(a.,b.)→c_times(a., c_conj(b.))÷c_mod2(b.);
    c_real(z.)→z.0;
    c_im(z.)→z.1;
    c_exp(z.)→exp(z.0)*[cos(z.1), sin(z.1)];
    c_ln(z.)→to_list(ln(c_mod(z.)), atan(z.1/z.0)); // principal value only.
    define[c_root(a,b)][
    >> c_root(a,b) will return the positive square root of a+i*b.
    >> See also: c_root(z.) to do this for complex numbers directly.
    >>    w. := c_root(-2,5)
    >>    w.
    >> [1.30099285300391,1.9216093264676]
    >>    c_times(w., w.)
    >> [-2.00000000000001,5.00000000000001]
    if[b==0][
      if[a<0][return([0,sqrt(abs(a))]);];
      return([sqrt(a),0]);
    ];
    return([sqrt((sqrt(a^2+b^2)+a)/2), abs(b)/b*sqrt((sqrt(a^2+b^2)-a)/2)]);
    ]; // end c_root
    c_root2(z.)→c_root(z.0,z.1);
]; //end module

/*
          module_load('/home/ncsa/dev/ncsa-git/security-lib/ncsa-qdl/src/main/resources/modules/complex.mdl');
          module_import('qdl:/math/complex');
*/